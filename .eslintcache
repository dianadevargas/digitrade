[{"/Users/techdev3/src/amplify-textract/src/index.js":"1","/Users/techdev3/src/amplify-textract/src/aws-exports.js":"2","/Users/techdev3/src/amplify-textract/src/App.js":"3","/Users/techdev3/src/amplify-textract/src/reportWebVitals.js":"4","/Users/techdev3/src/amplify-textract/src/transform.js":"5","/Users/techdev3/src/amplify-textract/src/identify.js":"6","/Users/techdev3/src/amplify-textract/src/transformRawFiles.js":"7"},{"size":500,"mtime":1607952987012,"results":"8","hashOfConfig":"9"},{"size":863,"mtime":1608079340818,"results":"10","hashOfConfig":"9"},{"size":2697,"mtime":1608115876378,"results":"11","hashOfConfig":"9"},{"size":362,"mtime":1607952987013,"results":"12","hashOfConfig":"9"},{"size":2803,"mtime":1608097437233,"results":"13","hashOfConfig":"9"},{"size":1634,"mtime":1608115475674,"results":"14","hashOfConfig":"9"},{"size":1093,"mtime":1608116112430,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2s8b8w",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/techdev3/src/amplify-textract/src/index.js",[],"/Users/techdev3/src/amplify-textract/src/aws-exports.js",[],"/Users/techdev3/src/amplify-textract/src/App.js",[],"/Users/techdev3/src/amplify-textract/src/reportWebVitals.js",[],"/Users/techdev3/src/amplify-textract/src/transform.js",["31"],"const transformTables = (itemData) => {\n  let descriptionIndex = -1;\n  let qtyIndex = -1;\n  let unitPriceIndex = -1;\n  let totalIndex = -1;\n  for (let i = 0; i < itemData[0].length; i++) {\n    switch (itemData[0][i].text.toLowerCase()) {\n      case 'description':\n        descriptionIndex = i;\n        break;\n      case 'qty':\n        qtyIndex = i;\n        break;\n      case 'unit price':\n        unitPriceIndex = i;\n        break;\n      case 'total':\n        totalIndex = i;\n        break;\n    };\n  };\n\n  const items = [];\n  for (let i = 1; i < itemData.length; i++) {\n    const name = itemData[i][descriptionIndex].text;\n    if (!name) {\n      continue;\n    }\n\n    const qty = qtyIndex === -1 ? 1 : itemData[i][qtyIndex].text;\n    const unitPrice = unitPriceIndex === -1 ? itemData[i][totalIndex].text : itemData[i][unitPriceIndex].text;\n\n    items.push({\n      name,\n      qty,\n      unitPrice,\n    });\n  };\n\n  return items;\n};\n\nconst transformLines = (lines) => {\n  if (!lines) {\n    return [];\n  }\n\n  const items = [];\n  let processingItems = false;\n  let name = '';\n  let unitPrice = 0;\n  lines.forEach(line => {\n    if (line.toLowerCase().includes('@ subtotal')) {\n      processingItems = false;;\n    };\n\n    if (processingItems) {\n      if (line.startsWith('$')) {\n        unitPrice = line.substring(1);\n        items.push({\n          name,\n          qty: 1,\n          unitPrice,\n        })\n        name = '';\n        unitPrice = 0;\n      } else {\n        name = `${name} ${line}`;\n      };\n    }\n\n    if (line.toUpperCase() === 'TAX INVOICE **') {\n      processingItems = true;;\n    };\n  });\n\n  return items;\n};\n\nconst getReceiptName = (jsonInput) => {\n  const timestamp = Date.now();\n  const date = new Date(timestamp);\n  const day = (\"0\" + date.getDate()).slice(-2);\n  const month = (\"0\" + (date.getMonth() + 1)).slice(-2);\n  const year = date.getFullYear();\n  const hours = (\"0\" + date.getHours()).slice(-2);\n  const minutes = (\"0\" + date.getMinutes()).slice(-2);\n  const seconds = (\"0\" + date.getSeconds()).slice(-2);\n  const dateString = year + \"-\" + month + \"-\" + day + \" \" + hours + \":\" + minutes + \":\" + seconds;\n\n  let receiptName = 'Receipt';\n  const lines = jsonInput.text.lines;\n  if (lines && lines.length > 0) {\n    receiptName = lines[0];\n  }\n\n  return `${receiptName} - ${dateString}`;\n};\n\nconst transform = (rawInput, fileName = null) => {\n  const jsonInput = JSON.parse(rawInput);\n\n  let items;\n  const tables = jsonInput.text.tables;\n  if (tables && tables.length === 1) {\n    items = transformTables(tables[0].table);\n  }\n  else {\n    items = transformLines(jsonInput.text.lines);\n  }\n\n  const receiptName = fileName || getReceiptName(jsonInput);\n\n  const receipt = {\n    name: receiptName,\n    imageUrl: \"\",\n    items,\n  };\n\n  return receipt;\n};\n\nexport default transform;\n","/Users/techdev3/src/amplify-textract/src/identify.js",[],"/Users/techdev3/src/amplify-textract/src/transformRawFiles.js",[],{"ruleId":"32","severity":1,"message":"33","line":7,"column":5,"nodeType":"34","messageId":"35","endLine":20,"endColumn":6},"default-case","Expected a default case.","SwitchStatement","missingDefaultCase"]